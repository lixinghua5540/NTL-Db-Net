###############################################################################
# Code from
# https://github.com/pytorch/vision/blob/master/torchvision/datasets/folder.py
# Modified the original code so that it also loads images from the current
# directory as well as the subdirectories
###############################################################################

import torch.utils.data as data

from PIL import Image
import os
import os.path

IMG_EXTENSIONS = [
    '.jpg', '.JPG', '.jpeg', '.JPEG',
    '.png', '.PNG', '.ppm', '.PPM', '.bmp', '.BMP',
    '.tif'
]


def is_image_file(filename):
    return any(filename.endswith(extension) for extension in IMG_EXTENSIONS)


def make_dataset(dir):#制作图片数据集
    images_dir = []
    assert os.path.isdir(dir), '%s 不是个文件目录' % dir#判断是否为目录，若不是则报异常

    for root, _, fnames in sorted(os.walk(dir)):#游走，获取dir路径下的所有文件名称
        for fname in fnames:
            if is_image_file(fname):#判断文件是否为图片格式
                path = os.path.join(root, fname)#拼接生成图片的路径
                images_dir.append(path)#组建图片路径数据集

    return images_dir

def make_test_dataset(dir):#制作图片数据集
    images_name = []
    images_dir = []
    assert os.path.isdir(dir), '%s 不是个文件目录' % dir#判断是否为目录，若不是则报异常
    
    for root, _, fnames in sorted(os.walk(dir)):#游走，获取dir路径下的所有文件名称
        for fname in fnames:
            if is_image_file(fname):#判断文件是否为图片格式
                images_name.append(fname)#组建图片路径数据集
    images_name.sort(key=lambda x:int(x.split('.')[0]))
    for i in range(len(images_name)):
        path = os.path.join(root, images_name[i])
        images_dir.append(path)

    return images_dir


def default_loader(path):
    return Image.open(path).convert('RGB')


class ImageFolder(data.Dataset):

    def __init__(self, root, transform=None, return_paths=False,
                 loader=default_loader):
        imgs = make_dataset(root)
        if len(imgs) == 0:
            raise(RuntimeError("未找到图片位于: " + root + "\n"
                               "支持的图片类型为: " +
                               ",".join(IMG_EXTENSIONS)))

        self.root = root
        self.imgs = imgs
        self.transform = transform
        self.return_paths = return_paths
        self.loader = loader

    def __getitem__(self, index):
        path = self.imgs[index]
        img = self.loader(path)
        if self.transform is not None:
            img = self.transform(img)
        if self.return_paths:
            return img, path
        else:
            return img

    def __len__(self):
        return len(self.imgs)
